{
	"info": {
		"_postman_id": "6d346440-0926-4a81-9bb3-ad3366b8ed39",
		"name": "ModernizaciÃ³n REST API",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" width=\"2162\" height=\"1530\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "12808771"
	},
	"item": [
		{
			"name": "Update Article by Slug",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1MiIsImV4cCI6MTc1Mjg5NjIzMX0.BreLN66p3mAfUzF9SrlNhh-mQKqDZ202J-kMUxfHUPhjggLb89Qj96O92phiUlixcc7yBa6ctjSlaB0uUtlXXw"
					}
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"article\": {\n  \"title\": \"Nuevo tÃ­tulo actualizado\",\n  \"description\": \"Nueva descripciÃ³n actulizada\",\n  \"body\": \"Nuevo contenido actualizado\"\n}\n}"
				},
				"url": "{{baseUrl}}/articles/aws-ec2-setup"
			},
			"response": []
		},
		{
			"name": "Delete Article by Slug",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1MiIsImV4cCI6MTc1Mjg5NjIzMX0.BreLN66p3mAfUzF9SrlNhh-mQKqDZ202J-kMUxfHUPhjggLb89Qj96O92phiUlixcc7yBa6ctjSlaB0uUtlXXw"
					}
				},
				"method": "DELETE",
				"header": [],
				"url": "{{baseUrl}}/articles/nuevo-tÃ­tulo-actualizado"
			},
			"response": []
		},
		{
			"name": "Login User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response contains required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.user).to.be.an('object').that.includes.all.keys('email', 'username', 'bio', 'image', 'token');",
							"});",
							"",
							"",
							"pm.test(\"Token must be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.user).to.exist;",
							"    pm.expect(responseData.user.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.user).to.be.an('object').that.has.property('email');",
							"    pm.expect(responseData.user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"user\": {\n    \n  \"email\": \"bob@example.com\",\n  \"password\": \"pass123\"\n}\n  }"
				},
				"url": "{{baseUrl}}/users/login"
			},
			"response": []
		},
		{
			"name": "Create User",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"user\": {\n    \"email\": \"pdiaz123@example.com\",\n    \"password\": \"pass123\",\n    \"username\": \"pdiaz\"\n  }\n}"
				},
				"url": "{{baseUrl}}/users"
			},
			"response": []
		},
		{
			"name": "Get Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Profile object should have the correct attributes\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.profile).to.exist.and.to.be.an('object');",
							"    ",
							"    pm.expect(responseData.profile).to.have.all.keys('username', 'bio', 'image', 'following');",
							"    ",
							"    pm.expect(responseData.profile.username).to.be.a('string');",
							"    pm.expect(responseData.profile.bio).to.be.a('string');",
							"    pm.expect(responseData.profile.image).to.be.a('string');",
							"    pm.expect(responseData.profile.following).to.be.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"Username is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.profile).to.have.property('username').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"The bio must be a string and can be empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.profile).to.exist;",
							"    pm.expect(responseData.profile.bio).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Image URL is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.profile).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.profile.image).to.exist;",
							"    pm.expect(responseData.profile.image).to.match(/^https?:\\/\\/.*\\.(jpeg|jpg|gif|png)$/i, \"Image URL should be in a valid format\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/profiles/bob"
			},
			"response": []
		},
		{
			"name": "Follow Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.profile).to.exist;",
							"    pm.expect(responseData.profile).to.have.all.keys('username', 'bio', 'image', 'following');",
							"});",
							"",
							"",
							"pm.test(\"Following field is a boolean\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.profile).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.profile.following).to.be.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"Username is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.profile).to.exist;",
							"    pm.expect(responseData.profile.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1MiIsImV4cCI6MTc1Mjg5NzIyNX0.U9HT8HaVzdNIfKBGRZLgSJx1e_Vu_9BnpZi6lj4bQ1WQnzifZJZWm4PbwwePGZgh6DEu4BLsIMIFAzQTd-xakQ"
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}"
					}
				],
				"url": "{{baseUrl}}/profiles/bob/follow"
			},
			"response": []
		},
		{
			"name": "Unfollow Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.profile).to.exist;",
							"    ",
							"    const requiredFields = ['username', 'bio', 'image', 'following'];",
							"    requiredFields.forEach(field => {",
							"        pm.expect(responseData.profile).to.have.property(field);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Following field is a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.profile).to.exist;",
							"    pm.expect(responseData.profile.following).to.be.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"Username is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.profile).to.exist;",
							"    pm.expect(responseData.profile.username).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1MiIsImV4cCI6MTc1Mjg5NzIyNX0.U9HT8HaVzdNIfKBGRZLgSJx1e_Vu_9BnpZi6lj4bQ1WQnzifZJZWm4PbwwePGZgh6DEu4BLsIMIFAzQTd-xakQ"
					}
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}"
					}
				],
				"url": "{{baseUrl}}/profiles/bob/follow"
			},
			"response": []
		},
		{
			"name": "Get Current User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the user object structure\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.user).to.exist.and.to.be.an('object');",
							"",
							"    pm.expect(responseData.user).to.have.all.keys('email', 'username', 'bio', 'image', 'token');",
							"",
							"    pm.expect(responseData.user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
							"    pm.expect(responseData.user.username).to.be.a('string');",
							"    pm.expect(responseData.user.bio).to.be.a('string');",
							"    pm.expect(responseData.user.image).to.be.a('string');",
							"    pm.expect(responseData.user.token).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Email must be in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.user).to.be.an('object').that.has.property('email');",
							"    ",
							"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
							"    pm.expect(responseData.user.email).to.match(emailRegex, \"Email format is invalid\");",
							"});",
							"",
							"",
							"pm.test(\"Token must be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.user).to.be.an('object');",
							"    pm.expect(responseData.user.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1MiIsImV4cCI6MTc1Mjg5NzIyNX0.U9HT8HaVzdNIfKBGRZLgSJx1e_Vu_9BnpZi6lj4bQ1WQnzifZJZWm4PbwwePGZgh6DEu4BLsIMIFAzQTd-xakQ"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}"
					}
				],
				"url": "{{baseUrl}}/user"
			},
			"response": []
		},
		{
			"name": "Update Current User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.user).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.user).to.have.all.keys('email', 'username', 'bio', 'image', 'token');",
							"});",
							"",
							"",
							"pm.test(\"Email must be in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.user).to.exist.and.to.be.an('object');",
							"    ",
							"    const email = responseData.user.email;",
							"    pm.expect(email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email is not in a valid format\");",
							"});",
							"",
							"",
							"pm.test(\"Username must be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.user).to.be.an('object').that.has.property('username');",
							"    pm.expect(responseData.user.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Token is present and has a valid length\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.user).to.exist;",
							"    pm.expect(responseData.user.token).to.exist.and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1MiIsImV4cCI6MTc1Mjg5NzIyNX0.U9HT8HaVzdNIfKBGRZLgSJx1e_Vu_9BnpZi6lj4bQ1WQnzifZJZWm4PbwwePGZgh6DEu4BLsIMIFAzQTd-xakQ"
					}
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user\": {\n        \"email\": \"bob@example.com\",\n        \"username\": \"bob\",\n        \"bio\": \"Bio of Bob\",\n        \"image\": \"https://example.com/img/bob.jpg\",\n        \"token\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1MiIsImV4cCI6MTc1Mjg5NzIyNX0.U9HT8HaVzdNIfKBGRZLgSJx1e_Vu_9BnpZi6lj4bQ1WQnzifZJZWm4PbwwePGZgh6DEu4BLsIMIFAzQTd-xakQ\"\n    }\n \n}"
				},
				"url": "{{baseUrl}}/user"
			},
			"response": []
		},
		{
			"name": "Get Comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.comments).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.comments.forEach(comment => {",
							"        pm.expect(comment).to.have.all.keys('id', 'body', 'createdAt', 'updatedAt', 'cursor', 'author');",
							"        pm.expect(comment.cursor).to.have.all.keys('data');",
							"        pm.expect(comment.author).to.have.all.keys('username', 'bio', 'image', 'following');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Author username is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.comments).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.comments.forEach(comment => {",
							"        pm.expect(comment.author.username).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Author username should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"CreatedAt and updatedAt are in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    ",
							"    responseData.comments.forEach(comment => {",
							"        pm.expect(comment.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt should be in ISO 8601 format\");",
							"        pm.expect(comment.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"UpdatedAt should be in ISO 8601 format\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Cursor data is a string that is not null or undefined\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.comments).to.be.an('array').that.is.not.empty;",
							"    responseData.comments.forEach(comment => {",
							"        pm.expect(comment.cursor.data).to.exist.and.to.be.a('string').and.to.not.be.empty;",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/articles/spring-boot-guide/comments"
			},
			"response": []
		},
		{
			"name": "Delete Comment",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1MiIsImV4cCI6MTc1Mjg5NzIyNX0.U9HT8HaVzdNIfKBGRZLgSJx1e_Vu_9BnpZi6lj4bQ1WQnzifZJZWm4PbwwePGZgh6DEu4BLsIMIFAzQTd-xakQ"
					}
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}"
					}
				],
				"url": "{{baseUrl}}/articles/spring-boot-guide/comments/249c3a65-69c9-410d-a041-4aa2135c0551"
			},
			"response": []
		},
		{
			"name": "Create Comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.eql(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.comment).to.exist;",
							"    pm.expect(responseData.comment).to.have.all.keys('id', 'body', 'createdAt', 'updatedAt', 'cursor', 'author');",
							"    ",
							"    pm.expect(responseData.comment.cursor).to.exist.and.to.have.property('data');",
							"    pm.expect(responseData.comment.author).to.exist.and.to.have.all.keys('username', 'bio', 'image', 'following');",
							"});",
							"",
							"",
							"pm.test(\"Author's username is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.comment.author.username).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"CreatedAt and UpdatedAt are in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    const createdAt = responseData.comment.createdAt;",
							"    const updatedAt = responseData.comment.updatedAt;",
							"",
							"    pm.expect(createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt is not in a valid date format\");",
							"    pm.expect(updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"UpdatedAt is not in a valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Following is a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.comment.author.following).to.exist.and.to.be.a('boolean');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1MiIsImV4cCI6MTc1Mjg5NzIyNX0.U9HT8HaVzdNIfKBGRZLgSJx1e_Vu_9BnpZi6lj4bQ1WQnzifZJZWm4PbwwePGZgh6DEu4BLsIMIFAzQTd-xakQ"
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"comment\": {\n    \"body\": \"Este es un comentario de prueba\"\n  }\n}"
				},
				"url": "{{baseUrl}}/articles/spring-boot-guide/comments"
			},
			"response": []
		},
		{
			"name": "Create Article",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1MiIsImV4cCI6MTc1Mjg5NzIyNX0.U9HT8HaVzdNIfKBGRZLgSJx1e_Vu_9BnpZi6lj4bQ1WQnzifZJZWm4PbwwePGZgh6DEu4BLsIMIFAzQTd-xakQ"
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"article\": {\n    \"title\": \"Nuevo artÃ­culo\",\n    \"description\": \"DescripciÃ³n del artÃ­culo\",\n    \"body\": \"Contenido del artÃ­culo\"\n  }\n}"
				},
				"url": "{{baseUrl}}/articles"
			},
			"response": []
		},
		{
			"name": "Favorite Article",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the article object structure\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.article).to.exist.and.to.be.an('object');",
							"    ",
							"    const article = responseData.article;",
							"    ",
							"    pm.expect(article).to.have.all.keys('id', 'slug', 'title', 'description', 'body', 'favorited', 'favoritesCount', 'createdAt', 'updatedAt', 'tagList', 'cursor', 'author');",
							"    ",
							"    pm.expect(article.favorited).to.be.a('boolean');",
							"    pm.expect(article.favoritesCount).to.be.a('number');",
							"    pm.expect(article.tagList).to.be.an('array');",
							"    ",
							"    pm.expect(article.cursor).to.exist.and.to.be.an('object');",
							"    pm.expect(article.author).to.exist.and.to.be.an('object');",
							"    ",
							"    const author = article.author;",
							"    pm.expect(author).to.have.all.keys('username', 'bio', 'image', 'following');",
							"    pm.expect(author.following).to.be.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"Favorites count is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.article).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.article.favoritesCount).to.exist.and.to.be.a('number').and.to.be.at.least(0, \"Favorites count should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"CreatedAt and updatedAt are in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.article).to.exist;",
							"    pm.expect(responseData.article.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt is not in a valid date format\");",
							"    pm.expect(responseData.article.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"UpdatedAt is not in a valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Author's username is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.article).to.have.property('author').that.is.an('object');",
							"    pm.expect(responseData.article.author.username).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1MiIsImV4cCI6MTc1Mjg5NzIyNX0.U9HT8HaVzdNIfKBGRZLgSJx1e_Vu_9BnpZi6lj4bQ1WQnzifZJZWm4PbwwePGZgh6DEu4BLsIMIFAzQTd-xakQ"
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}"
					}
				],
				"url": "{{baseUrl}}/articles/flyway-migrations/favorite"
			},
			"response": []
		},
		{
			"name": "Unfavorite Article",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('article');",
							"    ",
							"    const article = responseData.article;",
							"    pm.expect(article).to.be.an('object').that.includes.all.keys('id', 'slug', 'title', 'description', 'body', 'favorited', 'favoritesCount', 'createdAt', 'updatedAt', 'tagList', 'cursor', 'author');",
							"",
							"    const author = article.author;",
							"    pm.expect(author).to.be.an('object').that.includes.all.keys('username', 'bio', 'image', 'following');",
							"});",
							"",
							"",
							"pm.test(\"Favorited is a boolean\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.article).to.have.property('favorited').that.is.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"FavoritesCount is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.article).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.article.favoritesCount).to.exist.and.to.be.a('number').and.to.be.at.least(0, \"FavoritesCount should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Author object contains required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.article).to.have.property('author');",
							"    ",
							"    const author = responseData.article.author;",
							"    pm.expect(author).to.have.all.keys('username', 'bio', 'image', 'following');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1MiIsImV4cCI6MTc1Mjg5NzIyNX0.U9HT8HaVzdNIfKBGRZLgSJx1e_Vu_9BnpZi6lj4bQ1WQnzifZJZWm4PbwwePGZgh6DEu4BLsIMIFAzQTd-xakQ"
					}
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}"
					}
				],
				"url": "{{baseUrl}}/articles/flyway-migrations/favorite"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}